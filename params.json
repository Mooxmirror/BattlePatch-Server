{"name":"Bench","tagline":"A simple patch-server for games and apps based on HTTP and file hashes.","body":"Bench [![Build Status](https://travis-ci.org/mooxmirror/bench-server.svg)](https://travis-ci.org/mooxmirror/bench-server)\r\n=================\r\n\r\nBench provides a easy-to-use patch-environment for games and apps.\r\n\r\n## How does it work?\r\nBench uses three main contexts for sharing data.\r\n\r\n| Context  | Description |\r\n| -------- |-----------------------------------------------------------------------------------------------|\r\n| `/hash`  | Returns a plain text listing all files and their proper MD5-checksums seperated with a dollar-sign |\r\n| `/files` | Represents the /files directory on the server |\r\n| `/package`| Returns the zip file for complete new game installations |\r\n\r\n## Using the release archives\r\n\r\n*A step by step introduction for using the release jars.*\r\n\r\n### Deploying a patch\r\n\r\n1. Create a server root folder\r\n2. Copy the JAR-files into the folder\r\n3. Copy the ZIP-file with the game files into the folder\r\n4. Rename the pasted ZIP-file for example to *release.zip*\r\n4. Open a terminal (cmd, bash or something)\r\n5. Enter `java -jar PatchDeployer.jar release.zip`\r\n6. Close the terminal if everything was successful\r\n\r\nWhen you want to use the server without the ZIP-file, you can just copy all your game files into the files folder, open a terminal and run the PatchDeployer.jar without any command line argument.\r\n\r\n### Running the server\r\n\r\n1. After the deploying the patch you have to open a new terminal\r\n2. Type in `java -jar PatchServer.jar`\r\n3. Now you should see some log messages\r\n4. Open your webbrowser and enter the URL `localhost/hash`\r\n5. When everything works fine, you should see a list of files and their attached hashes (only when the release.zip isn't empty)\r\n6. You can customize the server by editing the config.properties file\r\n\r\n## Building the project\r\n\r\n1. Clone the repository using `git clone https://github.com/mooxmirror/Bench.git`\r\n2. Run `maven package`\r\n3. If successful, you get a file named `bench-x.x.x-jar-with-dependencies.jar`\r\n4. Copy this file to the folder, where you want to run the server\r\n5. To use the patch deployer, enter `java -cp bench-x.x.x-jar-with-dependencies.jar io.mooxmirror.bench.deployer.PatchDeployer [archive file]`\r\n6. To use the patch server, enter `java -cp bench-x.x.x-jar-with-dependencies.jar io.mooxmirror.bench.system.HttpPatchServer`\r\n7. Continue with the steps you find above\r\n\r\n### Example configuration file\r\n\r\nHere is a example configuration file (config.properties) with fully annotated settings:\r\n\r\n```\r\n# Bench configuration file\r\n# Enable /hash context\r\nhash.context=true\r\n# Enabled /package context\r\npackage.context=true\r\n# Enable /files context\r\nfiles.context=true\r\n# Port for the listener\r\nserver.port=80\r\n# Cache lifetime in milliseconds (600000ms = 600s = 10m)\r\ncache.lifetime=600000\r\n```\r\nYou successfully set up a new Bench server!\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}